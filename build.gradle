buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'

    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
// MixinGradle:
apply plugin: 'org.spongepowered.mixin'

version = project.properties.get("add_tags") == "none" ? "${minecraft_version}-${major}.${minor}.${build_number}" : "${minecraft_version}-${major}.${minor}.${build_number}-${add_tags}"
group = "${java_path}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel:  'parchment', version: '2023.02.26-1.19.3'
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--nogui'

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'progression_reloaded', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.0'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'
    //implementation 'com.netflix.nebula:nebula-release-plugin:17.2.2'
    implementation group: 'org.ow2.asm', name: 'asm', version: '9.5'
    implementation fg.deobf(group: 'com.blamejared.crafttweaker', name: "CraftTweaker-forge-${minecraft_version}", version: getProperty('crafttweaker_version'))
    //implementation fg.deobf(group: 'mezz.jei', name: "jei-${minecraft_version}-forge", version: getProperty('jei_version'))
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    // JEI API
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
}

mixin {
    add sourceSets.main, 'progression_reloaded.refmap.json'
    config 'progression_reloaded.mixins.json'

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "${mod_id}sareus",
                "Specification-Version": "4",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor" :"${mod_id}sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "${mod_id}.mixins.json"

        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

repositories {
    mavenCentral()
    // JEI API
    maven {
        url 'https://maven.blamejared.com'
    }

    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources.dependsOn('handleModProperties')

tasks.register('handleModProperties') {
    doLast {
        Properties properties = new Properties()
        File propertiesFile = new File("src/main/resources/META-INF/mod.properties")
        properties.load(propertiesFile.newDataInputStream())
        properties.setProperty('mod_version', version.toString())
        properties.setProperty('java_path', java_path)

        properties.store(propertiesFile.newWriter(), null)
        properties.load(propertiesFile.newDataInputStream())
    }
}
/*handleModProperties.dependsOn('versionIncr')

tasks.register('versionIncr') {
    doLast{
        Properties props = new Properties()
        File propsFile = new File('gradle.properties')
        props.load(propsFile.newDataInputStream())
        Boolean flag = props.getProperty('switch') asBoolean()
        if(flag){
            Integer buildnumber = (((props.getProperty('build_number')) as Integer) + 1 )
            props.setProperty('build_number', buildnumber.toString())
        }
        props.setProperty('switch', (!flag).toString())
        props.store(propsFile.newWriter(), null)
        props.load(propsFile.newDataInputStream())
    }
}*/
