import java.nio.file.Files

// For those who want the bleeding edge
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'

    }
}

plugins{
    id 'net.minecraftforge.gradle'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'eclipse'
    id 'maven-publish'
    id 'org.spongepowered.mixin'
}

version = "${minecraft_version}-${mod_version}.${build_number}"
group = 'de.thedead2.progression_reloaded'
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel:  'parchment', version: '2023.02.26-1.19.3'
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'progression_reloaded', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                progression_reloaded {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

build{
    dependsOn(incrBuildNumber)
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.0'
    implementation('com.google.guava:guava:31.1-jre')
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

mixin {
    add sourceSets.main, 'progression_reloaded.refmap.json'
    config 'progression_reloaded.mixins.json'

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "${mod_id}sareus",
                "Specification-Version": "4",
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor" :"${mod_id}sareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "${mod_id}.mixins.json"

        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('incrBuildNumber') {
    Properties properties = new Properties()
    File propertiesFile = new File('gradle.properties')
    properties.load(propertiesFile.newDataInputStream())
    Integer nextBuildNumber = (properties.getProperty('build_number') as Integer + 1)
    properties.setProperty('build_number', nextBuildNumber.toString())
    properties.store(propertiesFile.newWriter(), null)
    properties.load(propertiesFile.newDataInputStream())
}

/*jar {
    manifest {
        attributes 'FMLCorePlugin': 'de.thedead2.progression_reloaded.asm.ProgressionTransformer'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}*/
